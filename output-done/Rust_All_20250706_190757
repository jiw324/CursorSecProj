================================================================================
CodeQL Security Scan Report - Rust (All Files)
================================================================================
Scan Date: 2025-07-06 19:07:57
Total Files Scanned: 5 Rust files
Total Security Issues: 137
================================================================================

SECURITY VULNERABILITIES FOUND:
----------------------------------------


CRITICAL SEVERITY ISSUES:
------------------------------
[CRITICAL] Raw Mutable Pointer at systems_programming.rs:40: Raw mutable pointer usage: pub fn allocate(&mut self) -> Option<*mut u8> {
[CRITICAL] Unsafe Block at systems_programming.rs:43: Unsafe code block detected: unsafe {
[CRITICAL] Raw Mutable Pointer at systems_programming.rs:51: Raw mutable pointer usage: pub fn deallocate(&mut self, ptr: *mut u8) -> Result<(), &'static str> {
[CRITICAL] Raw Mutable Pointer at systems_programming.rs:204: Raw mutable pointer usage: mapping: *mut libc::c_void,
[CRITICAL] Raw Mutable Pointer at systems_programming.rs:206: Raw mutable pointer usage: mapping: *mut winapi::ctypes::c_void,
[CRITICAL] Unsafe Block at systems_programming.rs:221: Unsafe code block detected: let mapping = unsafe {
[CRITICAL] Unsafe Block at systems_programming.rs:264: Unsafe code block detected: unsafe { slice::from_raw_parts(self.mapping as *const u8, self.size) }
[CRITICAL] Unsafe Block at systems_programming.rs:281: Unsafe code block detected: unsafe {
[CRITICAL] Unsafe Block at systems_programming.rs:301: Unsafe code block detected: unsafe {
[CRITICAL] Unsafe Function at systems_programming.rs:344: Unsafe function definition: unsafe fn dot_product_avx(a: &[f32], b: &[f32]) -> f32 {
[CRITICAL] Unsafe Block at systems_programming.rs:733: Unsafe code block detected: unsafe {
[CRITICAL] Unsafe Block at data_structures.rs:39: Unsafe code block detected: let ptr = unsafe { alloc(layout) as *mut T };
[CRITICAL] Raw Mutable Pointer at data_structures.rs:39: Raw mutable pointer usage: let ptr = unsafe { alloc(layout) as *mut T };
[CRITICAL] Unsafe Cast at data_structures.rs:39: Unsafe cast to raw mutable pointer: let ptr = unsafe { alloc(layout) as *mut T };
[CRITICAL] Unsafe Block at data_structures.rs:54: Unsafe code block detected: unsafe {
[CRITICAL] Unsafe Block at data_structures.rs:65: Unsafe code block detected: unsafe {
[CRITICAL] Unsafe Block at data_structures.rs:73: Unsafe code block detected: unsafe {
[CRITICAL] Unsafe Block at data_structures.rs:97: Unsafe code block detected: let new_ptr = unsafe { alloc(new_layout) as *mut T };
[CRITICAL] Raw Mutable Pointer at data_structures.rs:97: Raw mutable pointer usage: let new_ptr = unsafe { alloc(new_layout) as *mut T };
[CRITICAL] Unsafe Cast at data_structures.rs:97: Unsafe cast to raw mutable pointer: let new_ptr = unsafe { alloc(new_layout) as *mut T };
[CRITICAL] Unsafe Block at data_structures.rs:101: Unsafe code block detected: unsafe {
[CRITICAL] Raw Mutable Pointer at data_structures.rs:109: Raw mutable pointer usage: dealloc(self.ptr.as_ptr() as *mut u8, old_layout);
[CRITICAL] Unsafe Cast at data_structures.rs:109: Unsafe cast to raw mutable pointer: dealloc(self.ptr.as_ptr() as *mut u8, old_layout);
[CRITICAL] Unsafe Block at data_structures.rs:121: Unsafe code block detected: unsafe {
[CRITICAL] Raw Mutable Pointer at data_structures.rs:127: Raw mutable pointer usage: dealloc(self.ptr.as_ptr() as *mut u8, layout);
[CRITICAL] Unsafe Cast at data_structures.rs:127: Unsafe cast to raw mutable pointer: dealloc(self.ptr.as_ptr() as *mut u8, layout);
[CRITICAL] Unsafe Block at data_structures.rs:173: Unsafe code block detected: let next = unsafe { (*tail).next.load(Ordering::Acquire) };
[CRITICAL] Unsafe Block at data_structures.rs:177: Unsafe code block detected: if unsafe { (*tail).next.compare_exchange_weak(
[CRITICAL] Unsafe Block at data_structures.rs:210: Unsafe code block detected: let next = unsafe { (*head).next.load(Ordering::Acquire) };
[CRITICAL] Unsafe Block at data_structures.rs:229: Unsafe code block detected: let data = unsafe { (*next).data.take() };
[CRITICAL] Unsafe Block at data_structures.rs:237: Unsafe code block detected: unsafe {


HIGH SEVERITY ISSUES:
------------------------------
[HIGH] SQL Injection Risk at cli_tool.rs:129: Potential SQL injection in format! macro: return Err(format!("Missing value for {}", arg));
[HIGH] SQL Injection Risk at cli_tool.rs:129: Potential SQL injection in format! macro: return Err(format!("Missing value for {}", arg));
[HIGH] SQL Injection Risk at cli_tool.rs:135: Potential SQL injection in format! macro: return Err(format!("Unknown argument: {}", args[i]));
[HIGH] SQL Injection Risk at cli_tool.rs:135: Potential SQL injection in format! macro: return Err(format!("Unknown argument: {}", args[i]));
[HIGH] SQL Injection Risk at cli_tool.rs:183: Potential SQL injection in format! macro: let full_pattern = format!("{}{}", flags, pattern);
[HIGH] SQL Injection Risk at cli_tool.rs:183: Potential SQL injection in format! macro: let full_pattern = format!("{}{}", flags, pattern);
[HIGH] SQL Injection Risk at cli_tool.rs:186: Potential SQL injection in format! macro: .map_err(|e| format!("Invalid regex pattern: {}", e))?;
[HIGH] SQL Injection Risk at cli_tool.rs:186: Potential SQL injection in format! macro: .map_err(|e| format!("Invalid regex pattern: {}", e))?;
[HIGH] SQL Injection Risk at cli_tool.rs:526: Potential SQL injection in format! macro: format!("{}...", &s[..max_len.saturating_sub(3)])
[HIGH] SQL Injection Risk at cli_tool.rs:526: Potential SQL injection in format! macro: format!("{}...", &s[..max_len.saturating_sub(3)])
[HIGH] SQL Injection Risk at cli_tool.rs:550: Potential SQL injection in format! macro: _ => Err(format!("Unknown command: {}", args.command).into()),
[HIGH] SQL Injection Risk at cli_tool.rs:550: Potential SQL injection in format! macro: _ => Err(format!("Unknown command: {}", args.command).into()),
[HIGH] Unwrap Usage at web_service.rs:131: Unchecked unwrap() call - may panic: let mut users = self.users.lock().unwrap();
[HIGH] Unwrap Usage at web_service.rs:145: Unchecked unwrap() call - may panic: let users = self.users.lock().unwrap();
[HIGH] Unwrap Usage at web_service.rs:154: Unchecked unwrap() call - may panic: let users = self.users.lock().unwrap();
[HIGH] Unwrap Usage at web_service.rs:161: Unchecked unwrap() call - may panic: let mut users = self.users.lock().unwrap();
[HIGH] Unwrap Usage at web_service.rs:164: Unchecked unwrap() call - may panic: let mut tasks = self.tasks.lock().unwrap();
[HIGH] Unwrap Usage at web_service.rs:189: Unchecked unwrap() call - may panic: let mut tasks = self.tasks.lock().unwrap();
[HIGH] Unwrap Usage at web_service.rs:197: Unchecked unwrap() call - may panic: let tasks = self.tasks.lock().unwrap();
[HIGH] Unwrap Usage at web_service.rs:206: Unchecked unwrap() call - may panic: let tasks = self.tasks.lock().unwrap();
[HIGH] Unwrap Usage at web_service.rs:216: Unchecked unwrap() call - may panic: let mut tasks = self.tasks.lock().unwrap();
[HIGH] Unwrap Usage at web_service.rs:237: Unchecked unwrap() call - may panic: let mut tasks = self.tasks.lock().unwrap();
[HIGH] Unwrap Usage at web_service.rs:281: Unchecked unwrap() call - may panic: let mut requests = self.requests.lock().unwrap();
[HIGH] Unwrap Usage at web_service.rs:356: Unchecked unwrap() call - may panic: Ok(serde_json::to_string(&ApiResponse::success("Service is healthy")).unwrap())
[HIGH] Unwrap Usage at web_service.rs:365: Unchecked unwrap() call - may panic: Ok(serde_json::to_string(&ApiResponse::success(user)).unwrap())
[HIGH] Unwrap Usage at web_service.rs:373: Unchecked unwrap() call - may panic: Ok(serde_json::to_string(&ApiResponse::success(user)).unwrap())
[HIGH] Unwrap Usage at web_service.rs:378: Unchecked unwrap() call - may panic: Ok(serde_json::to_string(&ApiResponse::success(users)).unwrap())
[HIGH] Unwrap Usage at web_service.rs:386: Unchecked unwrap() call - may panic: Ok(serde_json::to_string(&ApiResponse::success("User deleted")).unwrap())
[HIGH] Unwrap Usage at web_service.rs:396: Unchecked unwrap() call - may panic: Ok(serde_json::to_string(&ApiResponse::success(task)).unwrap())
[HIGH] Unwrap Usage at web_service.rs:404: Unchecked unwrap() call - may panic: Ok(serde_json::to_string(&ApiResponse::success(task)).unwrap())
[HIGH] Unwrap Usage at web_service.rs:412: Unchecked unwrap() call - may panic: Ok(serde_json::to_string(&ApiResponse::success(tasks)).unwrap())
[HIGH] Unwrap Usage at web_service.rs:421: Unchecked unwrap() call - may panic: Ok(serde_json::to_string(&ApiResponse::success(task)).unwrap())
[HIGH] Unwrap Usage at web_service.rs:429: Unchecked unwrap() call - may panic: Ok(serde_json::to_string(&ApiResponse::success("Task deleted")).unwrap())
[HIGH] Unwrap Usage at web_service.rs:437: Unchecked unwrap() call - may panic: .unwrap()
[HIGH] Unwrap Usage at web_service.rs:523: Unchecked unwrap() call - may panic: let mut connections = self.connections.lock().unwrap();
[HIGH] Unwrap Usage at web_service.rs:529: Unchecked unwrap() call - may panic: let mut connections = self.connections.lock().unwrap();
[HIGH] Unwrap Usage at web_service.rs:535: Unchecked unwrap() call - may panic: let connections = self.connections.lock().unwrap();
[HIGH] Unwrap Usage at web_service.rs:544: Unchecked unwrap() call - may panic: let connections = self.connections.lock().unwrap();
[HIGH] Unwrap Usage at web_service.rs:575: Unchecked unwrap() call - may panic: let user = user_response.data.unwrap();
[HIGH] Unwrap Usage at web_service.rs:593: Unchecked unwrap() call - may panic: let task = task_response.data.unwrap();
[HIGH] Unwrap Usage at web_service.rs:677: Unchecked unwrap() call - may panic: let user = db.create_user(create_req).await.unwrap();
[HIGH] Unwrap Usage at web_service.rs:680: Unchecked unwrap() call - may panic: let retrieved_user = db.get_user(user.id).await.unwrap();
[HIGH] Unwrap Usage at web_service.rs:683: Unchecked unwrap() call - may panic: let users = db.list_users().await.unwrap();
[HIGH] Unwrap Usage at web_service.rs:686: Unchecked unwrap() call - may panic: db.delete_user(user.id).await.unwrap();
[HIGH] Unwrap Usage at web_service.rs:697: Unchecked unwrap() call - may panic: }).await.unwrap();
[HIGH] Unwrap Usage at web_service.rs:702: Unchecked unwrap() call - may panic: }).await.unwrap();
[HIGH] Unwrap Usage at web_service.rs:711: Unchecked unwrap() call - may panic: }).await.unwrap();
[HIGH] Unwrap Usage at web_service.rs:715: Unchecked unwrap() call - may panic: let tasks = db.list_user_tasks(user.id).await.unwrap();
[HIGH] Unwrap Usage at web_service.rs:718: Unchecked unwrap() call - may panic: db.delete_task(task.id).await.unwrap();
[HIGH] SQL Injection Risk at web_service.rs:257: Potential SQL injection in format! macro: format!("token_{}", user_id)
[HIGH] SQL Injection Risk at web_service.rs:257: Potential SQL injection in format! macro: format!("token_{}", user_id)
[HIGH] Raw Const Pointer at systems_programming.rs:264: Raw const pointer usage: unsafe { slice::from_raw_parts(self.mapping as *const u8, self.size) }
[HIGH] Unsafe Cast at systems_programming.rs:264: Unsafe cast to raw const pointer: unsafe { slice::from_raw_parts(self.mapping as *const u8, self.size) }
[HIGH] Unwrap Usage at systems_programming.rs:433: Unchecked unwrap() call - may panic: let receiver = receiver.lock().unwrap();
[HIGH] Unwrap Usage at systems_programming.rs:588: Unchecked unwrap() call - may panic: let ptr1 = pool.allocate().unwrap();
[HIGH] Unwrap Usage at systems_programming.rs:589: Unchecked unwrap() call - may panic: let ptr2 = pool.allocate().unwrap();
[HIGH] Unwrap Usage at systems_programming.rs:590: Unchecked unwrap() call - may panic: let ptr3 = pool.allocate().unwrap();
[HIGH] Unwrap Usage at systems_programming.rs:597: Unchecked unwrap() call - may panic: pool.deallocate(ptr2).unwrap();
[HIGH] Unwrap Usage at systems_programming.rs:614: Unchecked unwrap() call - may panic: let sum = resource.read(|data| data.iter().sum::<i32>()).unwrap();
[HIGH] Unwrap Usage at systems_programming.rs:618: Unchecked unwrap() call - may panic: clone1.write(|data| data.push(6)).unwrap();
[HIGH] Unwrap Usage at systems_programming.rs:620: Unchecked unwrap() call - may panic: let new_sum = clone2.read(|data| data.iter().sum::<i32>()).unwrap();
[HIGH] Unwrap Usage at systems_programming.rs:646: Unchecked unwrap() call - may panic: handle.join().unwrap();
[HIGH] Unwrap Usage at systems_programming.rs:676: Unchecked unwrap() call - may panic: }).unwrap();
[HIGH] Unwrap Usage at systems_programming.rs:690: Unchecked unwrap() call - may panic: let mut file = File::create(test_file).unwrap();
[HIGH] Unwrap Usage at systems_programming.rs:691: Unchecked unwrap() call - may panic: writeln!(file, "This is a test file for systems programming demo.").unwrap();
[HIGH] Unwrap Usage at systems_programming.rs:692: Unchecked unwrap() call - may panic: writeln!(file, "It contains multiple lines of text.").unwrap();
[HIGH] Unwrap Usage at systems_programming.rs:693: Unchecked unwrap() call - may panic: writeln!(file, "Memory mapping will be used to read this efficiently.").unwrap();
[HIGH] FFI Declaration at systems_programming.rs:723: Foreign function interface declaration: extern "C" {
[HIGH] Raw Const Pointer at systems_programming.rs:724: Raw const pointer usage: fn strlen(s: *const libc::c_char) -> libc::size_t;
[HIGH] Unwrap Usage at systems_programming.rs:731: Unchecked unwrap() call - may panic: let c_string = CString::new(rust_string).unwrap();
[HIGH] Unwrap Usage at systems_programming.rs:757: Unchecked unwrap() call - may panic: let ptr1 = pool.allocate().unwrap();
[HIGH] Unwrap Usage at systems_programming.rs:758: Unchecked unwrap() call - may panic: let ptr2 = pool.allocate().unwrap();
[HIGH] Unwrap Usage at systems_programming.rs:787: Unchecked unwrap() call - may panic: let value = resource.read(|data| *data).unwrap();
[HIGH] Unwrap Usage at systems_programming.rs:790: Unchecked unwrap() call - may panic: resource.write(|data| *data = 100).unwrap();
[HIGH] Unwrap Usage at systems_programming.rs:792: Unchecked unwrap() call - may panic: let new_value = resource.read(|data| *data).unwrap();
[HIGH] Unwrap Usage at data_structures.rs:38: Unchecked unwrap() call - may panic: let layout = Layout::array::<T>(capacity).unwrap();
[HIGH] Unwrap Usage at data_structures.rs:42: Unchecked unwrap() call - may panic: ptr: NonNull::new(ptr).unwrap(),
[HIGH] Unwrap Usage at data_structures.rs:95: Unchecked unwrap() call - may panic: let new_layout = Layout::array::<T>(new_capacity).unwrap();
[HIGH] Unwrap Usage at data_structures.rs:98: Unchecked unwrap() call - may panic: let new_ptr = NonNull::new(new_ptr).unwrap();
[HIGH] Unwrap Usage at data_structures.rs:108: Unchecked unwrap() call - may panic: let old_layout = Layout::array::<T>(self.capacity).unwrap();
[HIGH] Unwrap Usage at data_structures.rs:126: Unchecked unwrap() call - may panic: let layout = Layout::array::<T>(self.capacity).unwrap();
[HIGH] Null Mutable Pointer at data_structures.rs:146: Null mutable pointer creation: next: AtomicPtr::new(std::ptr::null_mut()),
[HIGH] Null Pointer at data_structures.rs:146: Null pointer creation: next: AtomicPtr::new(std::ptr::null_mut()),
[HIGH] Unwrap Usage at data_structures.rs:526: Unchecked unwrap() call - may panic: min_node = min_node.left.as_mut().unwrap();
[HIGH] Null Dereference Risk at data_structures.rs:526: Potential null dereference: min_node = min_node.left.as_mut().unwrap();
[HIGH] Unwrap Usage at concurrent_programming.rs:30: Unchecked unwrap() call - may panic: let mut queue = self.queue.lock().unwrap();
[HIGH] Unwrap Usage at concurrent_programming.rs:36: Unchecked unwrap() call - may panic: let mut queue = self.queue.lock().unwrap();
[HIGH] Unwrap Usage at concurrent_programming.rs:41: Unchecked unwrap() call - may panic: let mut queue = self.queue.lock().unwrap();
[HIGH] Unwrap Usage at concurrent_programming.rs:43: Unchecked unwrap() call - may panic: queue = self.not_empty.wait(queue).unwrap();
[HIGH] Unwrap Usage at concurrent_programming.rs:45: Unchecked unwrap() call - may panic: queue.pop_front().unwrap()
[HIGH] Unwrap Usage at concurrent_programming.rs:49: Unchecked unwrap() call - may panic: let queue = self.queue.lock().unwrap();
[HIGH] Unwrap Usage at concurrent_programming.rs:54: Unchecked unwrap() call - may panic: let queue = self.queue.lock().unwrap();
[HIGH] Unwrap Usage at concurrent_programming.rs:294: Unchecked unwrap() call - may panic: let mut stats = self.stats.write().unwrap();
[HIGH] Unwrap Usage at concurrent_programming.rs:302: Unchecked unwrap() call - may panic: let mut receiver = self.receiver.lock().unwrap();
[HIGH] Unwrap Usage at concurrent_programming.rs:306: Unchecked unwrap() call - may panic: let mut stats = self.stats.write().unwrap();
[HIGH] Unwrap Usage at concurrent_programming.rs:315: Unchecked unwrap() call - may panic: let stats = self.stats.read().unwrap();
[HIGH] Unwrap Usage at concurrent_programming.rs:341: Unchecked unwrap() call - may panic: let mut stats = self.stats.write().unwrap();
[HIGH] Unreachable Macro at concurrent_programming.rs:401: Unreachable code macro: unreachable!()
[HIGH] Unwrap Usage at concurrent_programming.rs:463: Unchecked unwrap() call - may panic: handle.join().unwrap();
[HIGH] Unwrap Usage at concurrent_programming.rs:497: Unchecked unwrap() call - may panic: producer.send(format!("item_{}", i)).await.unwrap();
[HIGH] SQL Injection Risk at concurrent_programming.rs:420: Potential SQL injection in format! macro: handle1.process(format!("task_{}", i)).await?;
[HIGH] SQL Injection Risk at concurrent_programming.rs:420: Potential SQL injection in format! macro: handle1.process(format!("task_{}", i)).await?;
[HIGH] SQL Injection Risk at concurrent_programming.rs:421: Potential SQL injection in format! macro: handle2.process(format!("job_{}", i)).await?;
[HIGH] SQL Injection Risk at concurrent_programming.rs:421: Potential SQL injection in format! macro: handle2.process(format!("job_{}", i)).await?;
[HIGH] SQL Injection Risk at concurrent_programming.rs:497: Potential SQL injection in format! macro: producer.send(format!("item_{}", i)).await.unwrap();
[HIGH] SQL Injection Risk at concurrent_programming.rs:497: Potential SQL injection in format! macro: producer.send(format!("item_{}", i)).await.unwrap();

================================================================================
Scan completed successfully.
================================================================================
